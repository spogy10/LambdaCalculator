
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\002\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\002\003\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\004\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\022\002\ufffe\004\013\005\004\006\010\007" +
    "\006\010\007\014\005\015\012\001\002\000\020\004\013" +
    "\005\004\006\010\007\006\010\007\014\005\015\012\001" +
    "\002\000\024\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\014\ufffa\015\ufffa\001\002\000\020\004" +
    "\013\005\004\006\010\007\006\010\007\014\005\015\012" +
    "\001\002\000\024\004\013\005\004\006\010\007\006\010" +
    "\007\011\ufffe\013\024\014\005\015\012\001\002\000\020" +
    "\004\013\005\004\006\010\007\006\010\007\014\005\015" +
    "\012\001\002\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\014\ufffd\015\ufffd\001\002\000" +
    "\024\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\014\ufffc\015\ufffc\001\002\000\020\004\013\005" +
    "\004\006\010\007\006\010\007\014\005\015\012\001\002" +
    "\000\024\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\014\uffff\015\uffff\001\002\000\022\002\016" +
    "\004\013\005\004\006\010\007\006\010\007\014\005\015" +
    "\012\001\002\000\004\002\001\001\002\000\024\002\000" +
    "\004\000\005\000\006\000\007\000\010\000\011\000\014" +
    "\000\015\000\001\002\000\020\004\013\005\004\006\010" +
    "\007\006\010\007\014\005\015\012\001\002\000\024\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\014\ufff9\015\ufff9\001\002\000\020\004\013\005\004\006" +
    "\010\007\006\010\007\014\005\015\012\001\002\000\024" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\014\ufff7\015\ufff7\001\002\000\004\015\027\001\002" +
    "\000\022\004\013\005\004\006\010\007\006\010\007\011" +
    "\026\014\005\015\012\001\002\000\024\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb\015" +
    "\ufffb\001\002\000\004\012\030\001\002\000\022\004\013" +
    "\005\004\006\010\007\006\010\007\011\ufffe\014\005\015" +
    "\012\001\002\000\022\004\013\005\004\006\010\007\006" +
    "\010\007\011\032\014\005\015\012\001\002\000\024\002" +
    "\ufffe\004\013\005\004\006\010\007\006\010\007\011\ufffe" +
    "\014\005\015\012\001\002\000\024\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\014\ufff5\015\ufff5" +
    "\001\002\000\020\004\013\005\004\006\010\007\006\010" +
    "\007\014\005\015\012\001\002\000\024\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\015" +
    "\ufff6\001\002\000\020\004\013\005\004\006\010\007\006" +
    "\010\007\014\005\015\012\001\002\000\024\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8" +
    "\015\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\010\002\013\003\014\004\010\001\001\000" +
    "\006\002\035\004\010\001\001\000\002\001\001\000\006" +
    "\002\033\004\010\001\001\000\010\002\013\003\024\004" +
    "\010\001\001\000\006\002\021\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\017\004\010\001" +
    "\001\000\002\001\001\000\006\002\016\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\020\004" +
    "\010\001\001\000\002\001\001\000\006\002\022\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\016\004\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\013\003\030\004\010\001\001\000\006\002" +
    "\016\004\010\001\001\000\010\002\013\003\032\004\010" +
    "\001\001\000\006\002\016\004\010\001\001\000\006\002" +
    "\034\004\010\001\001\000\002\001\001\000\006\002\036" +
    "\004\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		return lexer.next_token();
	
    }


		private LambdaLexer lexer;
		private File file;
		public String finalResult = "";
		private boolean shouldPrint = false;
		private int betaReductionCount = 0;
		
		public parser( File file ) {
			this();
			this.file = file;
			try {
				lexer = new LambdaLexer( new FileReader( file ) );
			}
			catch ( IOException exception ) {
				throw new Error( "Unable to open file \"" + file + "\"" );
			}
		}
		
		public parser( String function ) {
			this();
			lexer = new LambdaLexer( new StringReader( function ) );
		}
		
		private void print(String x){
			if(shouldPrint)
				System.out.print(x);
		}
		
		private void println(String x){
			if(shouldPrint)
				System.out.println(x);
		}
		
		public void setShouldPrint(boolean b){
			this.shouldPrint = b;
		}
		
		public int getBetaReductionCount(){
			return betaReductionCount;
		}
		
		private boolean checkIfNum(String s){
			try {
				Integer.parseInt(s);
			} catch (NumberFormatException | NullPointerException e) {
				return false;
			}
			return true;
		}
		
		private boolean checkIfNum(String s1, String s2){
			return ( checkIfNum(s1) && checkIfNum(s2) );
		}
		
		public static String insertString(String originalString, String stringToBeInserted, int index)
		{

			// Create a new string
			String newString = originalString.substring(0, index + 1)
					+ stringToBeInserted
					+ originalString.substring(index + 1);

			// return the modified String
			return newString;
		}
		
		public static void createFile(String s){
        try {
            PrintWriter writer = new PrintWriter("temp.temp", "UTF-8");
            writer.print(s);
            writer.close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
	
	

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


		
	
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= EXPRESSION_LIST EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EXPRESSION_LIST ::= EXPRESSION_LIST EXPRESSION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e1 + e2;
		finalResult = e1 + e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXPRESSION_LIST ::= EXPRESSION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e1;
		finalResult = e1;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXPRESSION_LIST ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPRESSION ::= APPLICATION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e1;
		println(e1);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPRESSION ::= VARIABLE 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = var;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESSION ::= LEFT EXPRESSION_LIST RIGHT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = e1;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRESSION ::= CONSTANT 
            {
              String RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String con = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = con;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRESSION ::= PLUS EXPRESSION EXPRESSION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 if( checkIfNum(e1, e2) ){
			RESULT = String.valueOf( (Integer) Integer.parseInt(e1) + Integer.parseInt(e2) );
		 }else{
			RESULT = "( +" + " " + e1 + " " + e2 + ")";
		 }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESSION ::= MINUS EXPRESSION EXPRESSION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 if( checkIfNum(e1, e2) ){
			RESULT = String.valueOf( (Integer) Integer.parseInt(e1) - Integer.parseInt(e2) );
		 }else{
			RESULT = "( -" + " " + e1 + " " + e2 + ")";
		 }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESSION ::= MULTIPLY EXPRESSION EXPRESSION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 if( checkIfNum(e1, e2) ){
			RESULT = String.valueOf( (Integer) Integer.parseInt(e1) * Integer.parseInt(e2) );
		 }else{
			RESULT = "( *" + " " + e1 + " " + e2 + ")";
		 }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESSION ::= DIVIDE EXPRESSION EXPRESSION 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 if( checkIfNum(e1, e2) ){
			RESULT = String.valueOf( (Integer) Integer.parseInt(e1) / Integer.parseInt(e2) );
		 }else{
			RESULT = "( /" + " " + e1 + " " + e2 + ")";
		 }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // APPLICATION ::= LEFT LAMBDA VARIABLE DOT EXPRESSION_LIST RIGHT EXPRESSION_LIST 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(checkIfNum(e1) || (e2 == null)){
			    if( !checkIfNum(e1) ){ //if function isn't a number and e2 is null
			        Pattern par = Pattern.compile("[a-zA-Z]");
                    Matcher m = par.matcher(e1);
                    println("isn't a number but e2 is null");
                    if( m.find() ){
                        e1 = "(&"+var+"."+e1+")";
                        println("print new e1 "+e1);
                    }
			    }
				RESULT = e1;
			}else{
				println("print e2 "+e2);
				println("print e1 before e2 "+e1+" and var is "+var);
				e1 = e1.replace(var, e2);
				println("print e1 after e2 "+e1);
				Pattern par = Pattern.compile("[a-zA-Z]");
				Matcher m = par.matcher(e1);
				if( !m.find() && !checkIfNum(e1) ){
					String s = insertString(e1, "&t.", 0);
					String ss = insertString(s, "t", s.length()-1);
					println("print ss "+ss);
					//createFile(ss);
					parser p = new parser(ss);
					String temp = e1;
					try{
						p.parse();
						temp = p.finalResult;
						betaReductionCount += p.getBetaReductionCount();
					}catch (Exception e){
						e.printStackTrace();
						RESULT = e1;
					}
					println("print after parsing "+temp);
					RESULT = temp;
				}else{
				    e1 = "(&"+var+"."+e1+")";
				    println("print new e1 "+e1);

					RESULT = e1;
				}
			}
			
			if(e2 != null){
				betaReductionCount++;
			}
			
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPLICATION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
